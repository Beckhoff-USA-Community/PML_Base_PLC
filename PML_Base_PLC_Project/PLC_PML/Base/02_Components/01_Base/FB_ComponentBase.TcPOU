<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_ComponentBase" Id="{93c9c074-e59b-49de-8b78-d1cf33f60885}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ComponentBase IMPLEMENTS ITF_ComponentBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR CONSTANT
	//Constant declarations
	COMPONENT_BASE_ALARM_COUNT	: UDINT := 16;
END_VAR

VAR	
	//ITF_BasicComponent internal property variables
	bError 			: BOOL;			//Boolean to signal that an error has ocurred
	nErrorID 		: UDINT;		//Integer ID to identify the proper alarm to be posted from the parent module
	bEnabled		: BOOL;			//Enables or disables the component
	bSimulate		: BOOL;			//TRUE disables all hardware I/O and simulates input and output behavior
	sName			: STRING;		//String name of the component
	bActive			: BOOL;			//TRUE when the component is in its energized state, motion or detection
	bReady			: BOOL;			//TRUE when the component is ready for operation - (Should be set in extended component based on specific hardware and operation of the given component)
	
	//Alarming
	a_fbComponentBaseAlarms : ARRAY[1..COMPONENT_BASE_ALARM_COUNT] OF FB_TcAlarm;
	
	//HMI Monitoring and control structure
	stComponentBaseHMI : ST_ComponentBase_HMI;
	
	//Internal Variables
	bInitialized	: BOOL;
	bResetHappenedThisScan	: BOOL;		//Used for catching reset loops where errors are set and cleared in the same scan, causing a spike in Disk and ADS usage
	bResetHappenedLastScan	: BOOL;
	sTemp					: STRING;	//Generic Temp string for messaging or wherever else it is needed	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="01_ITF_ComponentBase" Id="{c6d497f2-156e-440d-9c2c-1c03eea21d72}">
      <Folder Name="01_Properties" Id="{e5c64086-407c-425b-a16b-0d3b6dfdd425}">
        <Folder Name="01_Config" Id="{7f5fe1c6-7354-4325-bb6d-2930dc36c8af}" />
        <Folder Name="02_Control" Id="{976c348b-cc04-4ee2-b1c7-700723149e3a}" />
        <Folder Name="03_Status" Id="{662f6474-0b26-4eab-937f-58c3c9eff2fd}" />
      </Folder>
      <Folder Name="02_Methods" Id="{256a27d0-cb20-46ab-abcb-85152c0ab3db}" />
    </Folder>
    <Property Name="Active" Id="{bc61300b-bb09-450c-b21b-4eade2439fcc}" FolderPath="01_ITF_ComponentBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY Active : BOOL	//TRUE when the component is in motion or otherwise completing a commanded task]]></Declaration>
      <Get Name="Get" Id="{22c6670c-3757-4ee9-9a04-bdbc7a7dc310}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active := bActive;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="AllowHMIControl" Id="{ea5b1cbc-fba4-4a06-93f5-52bf62fd6968}" FolderPath="01_ITF_ComponentBase\02_Methods\">
      <Declaration><![CDATA[METHOD AllowHMIControl : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stComponentBaseHMI.bHMIControlAvailable := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="BlockHMIControl" Id="{c5acfaad-2e13-4de2-829a-75ce5beb31b8}" FolderPath="01_ITF_ComponentBase\02_Methods\">
      <Declaration><![CDATA[METHOD BlockHMIControl : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stComponentBaseHMI.bHMIControlAvailable := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{afd9b957-a135-4679-8622-fc5b52009de2}" FolderPath="01_ITF_ComponentBase\02_Methods\">
      <Declaration><![CDATA[METHOD CyclicLogic : BOOL		//Should be called Externally akin to the PML Modules
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitialized THEN
	initialize();
	bInitialized := TRUE;
END_IF

IF NOT bSimulate AND NOT bError THEN	//If not in simulation mode or error state
	StandardOperation();
ELSIF NOT bError THEN
	SimulateOperation();	//Simulate inputs and outputs
ELSE
	ErrorOperation();
END_IF

Monitoring();		//Constant error and status monitoring
HardwareUpdate();	//Passes internal commands to hardware outputs and vice versa for inputs, implement via extended FB override
HMICommunication();	//Keeps the HMI data up to date, and processes requests from the HMI for this component]]></ST>
      </Implementation>
    </Method>
    <Property Name="Enabled" Id="{86698bf0-894b-412a-87e8-32a70ab8aadb}" FolderPath="01_ITF_ComponentBase\01_Properties\02_Control\">
      <Declaration><![CDATA[PROPERTY Enabled : BOOL	//Enables or disables the component
]]></Declaration>
      <Get Name="Get" Id="{1584ecb4-0ab9-4ebc-92c7-f70141f516a0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Enabled := bEnabled;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{0418f117-1ae9-4e07-b1bf-c5eef8bb8881}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bEnabled := Enabled;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Error" Id="{6c90baf7-eb06-4116-9da9-d962bbb4001b}" FolderPath="01_ITF_ComponentBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY Error : BOOL	//Boolean to signal that an error has ocurred
]]></Declaration>
      <Get Name="Get" Id="{8302f893-6dd6-4501-9f37-3be08d29cf06}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := bError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorID" Id="{522f54a0-4f42-4f97-93a1-3d636ade75ec}" FolderPath="01_ITF_ComponentBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY ErrorID : UDINT	//Integer ID to identify the proper alarm to be posted from the parent module]]></Declaration>
      <Get Name="Get" Id="{31491cde-d744-4c54-b94d-ebc7c59d30ac}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorID := nErrorID;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{520dc520-ad3e-4d52-a8b4-1551a2a50971}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nErrorID := ErrorID;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ErrorOperation" Id="{f619ffd8-c4fa-4b59-8760-8523dde09884}">
      <Declaration><![CDATA[METHOD ErrorOperation : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Override from extended FB with error operation logic (Shut off outputs, clear inputs, blink, send error messages, etc)]]></ST>
      </Implementation>
    </Method>
    <Method Name="HardwareUpdate" Id="{abdd4852-be45-40a6-988f-bbe025414073}">
      <Declaration><![CDATA[METHOD HardwareUpdate : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//override from extended FB with reads and writes between internal variables and hardware inputs and outputs]]></ST>
      </Implementation>
    </Method>
    <Method Name="HMICommunication" Id="{1d2523ef-921c-4ac8-8add-7cf4a36da1ba}">
      <Declaration><![CDATA[METHOD HMICommunication : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Extend this method in extended FBs to communicate specific implementation data

//Process HMI requests
IF stComponentBaseHMI.bIncomingHMIRequest AND NOT stComponentBaseHMI.bHMICommandConfirmation THEN		//If a request has been issued by the HMI, and a previous request has not just finished being processed
	IF stComponentBaseHMI.bHMIControlAvailable THEN		//If the current conditions permit HMI control (Should be determined by the extended application components)
		IF stComponentBaseHMI.bEnableHMIRequest THEN
			bEnabled := TRUE;
			stComponentBaseHMI.bHMICommandConfirmation := TRUE;	//Confirm that the request has been processed
		END_IF
		IF stComponentBaseHMI.bDisableHMIRequest THEN
			bEnabled := FALSE;
			stComponentBaseHMI.bHMICommandConfirmation := TRUE;	//Confirm that the request has been processed
		END_IF
		IF stComponentBaseHMI.bResetHMIRequest THEN
			Reset();
			stComponentBaseHMI.bHMICommandConfirmation := TRUE;	//Confirm that the request has been processed
		END_IF
		IF stComponentBaseHMI.bSimulateOperationHMIRequest THEN
			bSimulate := TRUE;
			stComponentBaseHMI.bHMICommandConfirmation := TRUE;	//Confirm that the request has been processed
		END_IF
		IF stComponentBaseHMI.bStandardOperationHMIRequest THEN
			bSimulate := FALSE;
			stComponentBaseHMI.bHMICommandConfirmation := TRUE;	//Confirm that the request has been processed
		END_IF
	END_IF
END_IF

//Update HMI status info
stComponentBaseHMI.bActive := bActive;
stComponentBaseHMI.bEnabled := bEnabled;
stComponentBaseHMI.sName := sName;
stComponentBaseHMI.bError := bError;
stComponentBaseHMI.bSimulate := bSimulate;
stComponentBaseHMI.nErrorID := nErrorID;]]></ST>
      </Implementation>
    </Method>
    <Method Name="initialize" Id="{1cd968e9-db2d-41e3-8a70-d048b41b074e}">
      <Declaration><![CDATA[METHOD initialize : BOOL
VAR_INPUT
END_VAR

VAR
	sTemp: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Extend initialize as needed in extended FBs

sTemp := CONCAT(CONCAT(CONCAT('Component ', ': '), sName), ' '); 	//Creates a utility string for alarms and other messaging that reads (example text) - "Module 10 - Main Casepacker" to be followed by the alarm or message info
//TODO: Rename Event Class to AxisBase
F_CreateAllEventsInClass(	p_aAlarms := a_fbComponentBaseAlarms,
							nClassSize := SIZEOF(TC_EVENTS.ComponentBase),
							pInitEvent := ADR(TC_EVENTS.ComponentBase.InitReferenceEvent),
							sPrefix := sTemp );]]></ST>
      </Implementation>
    </Method>
    <Method Name="Monitoring" Id="{bfd9d149-0427-4d13-a652-4580ad3b7638}">
      <Declaration><![CDATA[METHOD Monitoring : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Extend from extended FB with monitoring logic

//Used for catching reset loops where errors are set and cleared in the same scan, causing a spike in Disk and ADS usage
//To implement, condition error setting with a check for bResetHappenedThisScan, raise the ResetLoopDetected event, and stop error detection for the component
IF bResetHappenedThisScan AND NOT bResetHappenedLastScan THEN
	bResetHappenedLastScan := TRUE;
	bResetHappenedThisScan :=FALSE;
ELSE
	IF bError THEN
		RaiseAlarmWithStrings(a_fbComponentBaseAlarms[E_ComponentBase.ResetLoopDetected], UDINT_TO_STRING(nErrorID), '');
	END_IF
	bResetHappenedLastScan := FALSE;
END_IF

IF NOT a_fbComponentBaseAlarms[E_ComponentBase.SimulationWarning].bRaised AND bSimulate THEN
	a_fbComponentBaseAlarms[E_ComponentBase.SimulationWarning].Raise(0);
ELSIF a_fbComponentBaseAlarms[E_ComponentBase.SimulationWarning].bRaised AND NOT bSimulate THEN
	a_fbComponentBaseAlarms[E_ComponentBase.SimulationWarning].Clear(0,0);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Name" Id="{8d65d0ee-79e5-44fd-9af0-abf9b261fcfa}" FolderPath="01_ITF_ComponentBase\01_Properties\01_Config\">
      <Declaration><![CDATA[PROPERTY Name : STRING]]></Declaration>
      <Get Name="Get" Id="{730ced66-cd8b-4cdd-b343-9360b6ba9ca2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Name := sName;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{265a41da-87cb-4c50-a4fb-f10a6353512e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sName := Name;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="RaiseAlarm" Id="{2c95cd98-f45d-4c55-8c68-a145068d3a38}">
      <Declaration><![CDATA[METHOD RaiseAlarm : BOOL
VAR_IN_OUT
	fbAlarm		: FB_TcAlarm;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_RaiseAlarmAndSetFlags(fbAlarm := fbAlarm,
						bErrorFlag := bError,
						nErrorID := nErrorID);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseAlarmWithStrings" Id="{9b6b1366-567f-4c88-8d80-c1800b1766d5}">
      <Declaration><![CDATA[METHOD RaiseAlarmWithStrings : BOOL
VAR_IN_OUT
	fbAlarm		: FB_TcAlarm;	//Alarm to be raised
END_VAR
VAR_INPUT
	sString_1	: STRING;		//First String Parameter (The Name of this component will be applied first automatically)
	sString_2	: STRING;		//Second String Parameter
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_RaiseAlarmWithStringsAndFlags( 	fbAlarm := fbAlarm,
									bErrorFlag := bError,
									nErrorID := nErrorID,
									sString_1 := sName,
									sString_2 := sString_1,
									sString_3 := sString_2);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Ready" Id="{16550771-a7fe-4296-8e3b-6ef681152a80}" FolderPath="01_ITF_ComponentBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY Ready : BOOL]]></Declaration>
      <Get Name="Get" Id="{91192a27-e72b-49cf-a266-eaa5b556b659}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Ready := bReady;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{fdbb4a8b-7401-4011-85e0-df5c0eb6b89d}" FolderPath="01_ITF_ComponentBase\02_Methods\">
      <Declaration><![CDATA[METHOD Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bError (*AND NOT nErrorID = E_ComponentBase.ResetLoopDetected *)THEN
	bError := FALSE;
	nErrorID := 0;
	
	bResetHappenedThisScan := TRUE;
//ELSIF bError AND NOT a_fbComponentBaseAlarms[E_ComponentBase.ResetNotPermitted].bRaised THEN
//	a_fbComponentBaseAlarms[E_ComponentBase.ResetNotPermitted].Raise(0);
ELSIF NOT bError THEN
	;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Simulate" Id="{ebb42854-1266-4f6c-84a1-4c0a912b758b}" FolderPath="01_ITF_ComponentBase\01_Properties\01_Config\">
      <Declaration><![CDATA[
PROPERTY Simulate : BOOL
]]></Declaration>
      <Get Name="Get" Id="{17d1377a-ffdb-4d07-8b8e-165928f3cf8f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Simulate := bSimulate;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{8823fd28-0770-436d-aba3-dbafa54451f7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bSimulate := Simulate;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="SimulateOperation" Id="{3671ca9e-3bc3-423d-9ff5-9067bbee6b2e}">
      <Declaration><![CDATA[METHOD SimulateOperation : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Override from extended FB with simulated operation logic]]></ST>
      </Implementation>
    </Method>
    <Method Name="StandardOperation" Id="{39013a93-6488-4d2f-b227-6a329265cedd}">
      <Declaration><![CDATA[METHOD StandardOperation : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Override from extended FB with normal operation logic
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ComponentBase">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.Active.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.AllowHMIControl">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.BlockHMIControl">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.CyclicLogic">
      <LineId Id="57" Count="14" />
      <LineId Id="49" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.Enabled.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.Enabled.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.Error.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.ErrorID.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.ErrorID.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.ErrorOperation">
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.HardwareUpdate">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.HMICommunication">
      <LineId Id="43" Count="6" />
      <LineId Id="85" Count="0" />
      <LineId Id="51" Count="2" />
      <LineId Id="84" Count="0" />
      <LineId Id="55" Count="2" />
      <LineId Id="83" Count="0" />
      <LineId Id="59" Count="2" />
      <LineId Id="82" Count="0" />
      <LineId Id="63" Count="2" />
      <LineId Id="81" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="71" Count="3" />
      <LineId Id="77" Count="0" />
      <LineId Id="75" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.initialize">
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="7" Count="4" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.Monitoring">
      <LineId Id="6" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="29" Count="1" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.Name.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.Name.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.RaiseAlarm">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.RaiseAlarmWithStrings">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="3" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.Ready.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.Reset">
      <LineId Id="9" Count="0" />
      <LineId Id="4" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="14" Count="1" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.Simulate.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.Simulate.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.SimulateOperation">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_ComponentBase.StandardOperation">
      <LineId Id="20" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>