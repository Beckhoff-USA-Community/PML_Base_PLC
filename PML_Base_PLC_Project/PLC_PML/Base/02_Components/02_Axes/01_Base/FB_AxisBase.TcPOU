<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_AxisBase" Id="{2724bcaf-4a66-48a7-9f8e-fdbdfe17eb8e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ABSTRACT FB_AxisBase EXTENDS FB_ComponentBase IMPLEMENTS ITF_AxisBase
VAR CONSTANT
	//Constant declarations
	AXIS_BASE_ALARM_COUNT	: UDINT := 16;
END_VAR

VAR
	//ITF_AxisBase internal property variables
	fJogFastVelocity	: LREAL;
	fJogSlowVelocity	: LREAL;
	fTargetVelocity		: LREAL := 5;
	
	bDriveEnabled		: BOOL;
	bInGear				: BOOL;
	bInPosition			: BOOL;
	fPosition 			: LREAL;
	fPositionSetpoint	: LREAL;
	bStopped			: BOOL;
	bHomed				: BOOL;
	bDriveError			: BOOL;
	bAxisError			: BOOL;
	
	//Axis MC function blocks
	fbAxisJog: MC_Jog;
	fbAxisPower: MC_Power;
	fbAxisReset: MC_Reset;
	fbMoveAbsolute: MC_MoveAbsolute;
	fbMoveVelocity: MC_MoveVelocity;
	fbMoveRelative: MC_MoveRelative;
	fbAxisHalt: MC_Halt;
	fbAxisStop: MC_Stop;
	fbAxisHome: MC_Home;
	fbGearIn: MC_GearIn;
	fbGearOut: MC_GearOut;
	fbResetDrv: FB_SoEReset;
	fbWriteParameter : MC_WriteParameter;
	
	//Alarming
	a_fbAxisBaseAlarms : ARRAY[1..AXIS_BASE_ALARM_COUNT] OF FB_TcAlarm;
	
	//Internal Variables
	fOverride		: LREAL := 100;		//Velocity Override
	SelectedAxis	: REFERENCE TO AXIS_REF REF= HardwareAxis;	//TODO: Make a better simulation system
	SimulationAxis: AXIS_REF;
	HardwareAxis: AXIS_REF;
	
	stAxisBaseHMI		: ST_AxisBase_HMI;
	
	nAxisCopy: INT;
	bParamCopyComplete: BOOL;
END_VAR
VAR_IN_OUT
	MasterAxis	: AXIS_REF;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="01_SUPER_Overrides" Id="{70b354cc-2cb1-4c5f-a445-dbcd21756825}">
      <Folder Name="01_Properties" Id="{f7aacb95-7ede-4f74-9420-049f48b3a795}" />
      <Folder Name="02_Methods" Id="{5b2faab9-1eb0-494c-97f9-6ea5d35664e2}" />
    </Folder>
    <Folder Name="02_ITF_AxisBase" Id="{c94cb006-fcd3-439c-ab42-ffdbc1c4b486}">
      <Folder Name="01_Properties" Id="{622640d9-38c8-4c61-88fe-751bac9bc194}">
        <Folder Name="01_Config" Id="{18846eb0-bc68-4a01-94f2-7e20950c6609}" />
        <Folder Name="02_Control" Id="{7d88d5d2-42e2-4442-9aa3-aea79db91cb6}" />
        <Folder Name="03_Status" Id="{39a57548-1cdb-4874-bcf4-b3849537dccb}" />
      </Folder>
      <Folder Name="02_Methods" Id="{8631449c-e13c-4da9-806d-359d178766b3}" />
    </Folder>
    <Folder Name="Methods" Id="{6091336e-f7a5-49a6-b5ea-b3aa6c2147ea}" />
    <Method Name="AllowHMIControl" Id="{78c45a43-0235-4935-af7a-19df5967a18c}" FolderPath="01_SUPER_Overrides\02_Methods\">
      <Declaration><![CDATA[METHOD AllowHMIControl : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.AllowHMIControl();

stAxisBaseHMI.bHMIControlAvailable := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="AxisError" Id="{29d86f1c-d305-4dde-b9e6-e3f53421d7b6}" FolderPath="02_ITF_AxisBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY AxisError : BOOL]]></Declaration>
      <Get Name="Get" Id="{954c1278-0224-499b-9f37-c39fdbd99a43}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AxisError := bAxisError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AxisRef" Id="{e105390b-60e0-4f3f-87d6-2543e978e7e0}" FolderPath="02_ITF_AxisBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY AxisRef : AXIS_REF]]></Declaration>
      <Get Name="Get" Id="{38d469f4-c2fd-48d2-818c-a001a88aa3c1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AxisRef := SelectedAxis;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="BlockHMIControl" Id="{98120c1e-ae37-4bf9-bbf0-5c02f729c84f}" FolderPath="01_SUPER_Overrides\02_Methods\">
      <Declaration><![CDATA[METHOD BlockHMIControl : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.BlockHMIControl();

stAxisBaseHMI.bHMIControlAvailable := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateEvents" Id="{cd750f02-9d2b-439f-961a-0fcee54e94a8}" FolderPath="01_SUPER_Overrides\02_Methods\">
      <Declaration><![CDATA[{attribute 'call_after_online_change_slot' := '<slot>'}
METHOD CreateEvents : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_CreateAllEventsInClass(	p_aAlarms := a_fbAxisBaseAlarms,
							nClassSize := SIZEOF(TC_EVENTS.AxisBase),
							pInitEvent := ADR(TC_EVENTS.PMLAlarms.InitReferenceEvent),
							sPrefix := sName);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="DriveEnabled" Id="{c7f1ee17-db34-4e43-a694-91ab73ce00fc}" FolderPath="02_ITF_AxisBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY DriveEnabled : BOOL]]></Declaration>
      <Get Name="Get" Id="{b47da978-5009-44fe-a777-97158ddd8c0e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DriveEnabled := bDriveEnabled;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="DriveError" Id="{044691b0-da05-4b57-a535-a7371754dfdd}" FolderPath="02_ITF_AxisBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY DriveError : BOOL]]></Declaration>
      <Get Name="Get" Id="{87f3c25e-f9b7-49f4-8697-c25bc395332c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DriveError := bDriveError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ErrorOperation" Id="{804f7b33-db27-4ed2-8349-83fd3f9cde0f}" FolderPath="01_SUPER_Overrides\02_Methods\">
      <Declaration><![CDATA[METHOD ErrorOperation : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.ErrorOperation();

bEnabled := FALSE;

IF bInGear THEN
	GearOut();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GearInBasic" Id="{6103e483-a26b-464a-891a-4779026115e8}" FolderPath="02_ITF_AxisBase\02_Methods\">
      <Declaration><![CDATA[METHOD GearInBasic : BOOL
VAR_IN_OUT
	master : AXIS_REF;	//Master axis to which the gearing will be made
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bActive AND NOT bError AND NOT SelectedAxis.Status.Coupled THEN
	
	IF __ISVALIDREF(master) THEN
		MasterAxis REF= master;		//"Master" must be specified in the FB call, so this particular variable is declared in the main FB and assigned from here
		fbGearIn.Execute := TRUE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GearOut" Id="{c70ab336-6838-490c-9784-7c2b850ef36d}" FolderPath="02_ITF_AxisBase\02_Methods\">
      <Declaration><![CDATA[METHOD GearOut : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  bStopped AND NOT bActive THEN
	fbGearOut.Execute := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="HardwareUpdate" Id="{aebd262c-3881-4b7c-9be9-4d42d90ff7a6}" FolderPath="01_SUPER_Overrides\02_Methods\">
      <Declaration><![CDATA[METHOD HardwareUpdate : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.HardwareUpdate();
	
//Resets the axis Drive Hardware when commanded by a "ResetDrive" Method call
fbResetDrv(
	NetId:= '', 
	Timeout:= T#10S, 
	Axis:= HardwareAxis);
	
fbResetDrv.Execute := FALSE;

MotionControl();]]></ST>
      </Implementation>
    </Method>
    <Method Name="HMICommunication" Id="{b0da125e-e37b-45b7-b3c0-8508142352fd}" FolderPath="01_SUPER_Overrides\02_Methods\">
      <Declaration><![CDATA[METHOD HMICommunication : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Extend this method in extended FBs to communicate specific implementation data
SUPER^.HMICommunication();

//Process HMI requests
IF stAxisBaseHMI.bIncomingHMIRequest AND NOT stAxisBaseHMI.bHMICommandConfirmation THEN		//If a request has been issued by the HMI, and a previous request has not just finished being processed
	IF stAxisBaseHMI.bHMIControlAvailable THEN		//If the current conditions permit HMI control (Should be determined by the extended application components)
		IF stAxisBaseHMI.bDriveEnableHMIRequest THEN
			bEnabled := TRUE;
			stAxisBaseHMI.bHMICommandConfirmation := TRUE;	//Confirm that the request has been processed
		END_IF
		IF stAxisBaseHMI.bDriveDisableHMIRequest THEN
			bEnabled := FALSE;
			stAxisBaseHMI.bHMICommandConfirmation := TRUE;	//Confirm that the request has been processed
		END_IF
		IF stAxisBaseHMI.bSetJogFastVelocityRequest THEN
			fJogFastVelocity := stAxisBaseHMI.fSetJogFastVelocityValue;
			stAxisBaseHMI.bHMICommandConfirmation := TRUE;	//Confirm that the request has been processed
		END_IF
		IF stAxisBaseHMI.bSetJogSlowVelocityRequest THEN
			fJogSlowVelocity := stAxisBaseHMI.fSetJogSlowVelocityValue;
			stAxisBaseHMI.bHMICommandConfirmation := TRUE;	//Confirm that the request has been processed
		END_IF
		IF stAxisBaseHMI.bSetTargetVelocityRequest THEN
			fTargetVelocity := stAxisBaseHMI.bSetTargetVelocityValue;
			stAxisBaseHMI.bHMICommandConfirmation := TRUE;	//Confirm that the request has been processed
		END_IF
	END_IF
END_IF

//Update HMI status info
stAxisBaseHMI.fJogFastVelocity := fJogFastVelocity;
stAxisBaseHMI.fJogSlowVelocity := fJogSlowVelocity;
stAxisBaseHMI.fTargetVelocity := fTargetVelocity;
stAxisBaseHMI.bDriveEnabled := bDriveEnabled;
stAxisBaseHMI.bInGear := bInGear;
stAxisBaseHMI.bInPosition := bInPosition;
stAxisBaseHMI.fPosition := fPosition;
stAxisBaseHMI.fPositionSetpoint := fPositionSetpoint;
stAxisBaseHMI.bStopped := bStopped;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Home" Id="{499c81b6-049f-44ed-a75e-5d80c1d06e89}" FolderPath="02_ITF_AxisBase\02_Methods\">
      <Declaration><![CDATA[METHOD Home : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//This method should be overridden by the extending FB based on the specific hardware configuration
fbAxisHome.Execute := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Homed" Id="{dc01987e-63e6-4999-8f9b-edd35b84343a}" FolderPath="02_ITF_AxisBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY Homed : BOOL]]></Declaration>
      <Get Name="Get" Id="{00bc53d2-461b-4d02-9bf7-a72bf6ad3705}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Homed := bHomed;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InGear" Id="{24c322e0-da8a-4736-8a2f-7e334658051a}" FolderPath="02_ITF_AxisBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY InGear : BOOL]]></Declaration>
      <Get Name="Get" Id="{8bb13dfc-0add-46bd-bfa6-8b0f014cd00d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InGear := bInGear;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Inhibit" Id="{0f83e6a2-8979-4873-9d90-d2609d31c21d}" FolderPath="02_ITF_AxisBase\02_Methods\">
      <Declaration><![CDATA[METHOD Inhibit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbAxisPower.Override := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="initialize" Id="{5fde8ae3-1f58-43c0-8ce3-aad5840cbb70}" FolderPath="01_SUPER_Overrides\02_Methods\">
      <Declaration><![CDATA[METHOD initialize : BOOL
VAR_INPUT
END_VAR

VAR
	sTemp: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.initialize();

sTemp := CONCAT(CONCAT(CONCAT('Axis ', ': '), sName), ' '); 	//Creates a utility string for alarms and other messaging that reads (example text) - "Module 10 - Main Casepacker" to be followed by the alarm or message info
//TODO: Rename Event Class to AxisBase
F_CreateAllEventsInClass(	p_aAlarms := a_fbAxisBaseAlarms,
							nClassSize := SIZEOF(TC_EVENTS.AxisBase),
							pInitEvent := ADR(TC_EVENTS.AxisBase.InitReferenceEvent),
							sPrefix := sTemp );]]></ST>
      </Implementation>
    </Method>
    <Property Name="InPosition" Id="{d5486534-5978-4479-95e8-ace111d11187}" FolderPath="02_ITF_AxisBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY InPosition : BOOL]]></Declaration>
      <Get Name="Get" Id="{8040b295-8ac3-4387-a918-4d660c3a66dc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InPosition := bInPosition;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Jog" Id="{7f8f32e3-9f32-4eeb-b744-6da4e93681ab}" FolderPath="02_ITF_AxisBase\02_Methods\">
      <Declaration><![CDATA[METHOD Jog : BOOL
VAR_INPUT
	direction	: BOOL;			//"TRUE" for positive jog, "FALSE" for negative jog
	fast		: BOOL;			//"TRUE" for 'fast' jog, "FALSE" for 'slow' jog (As defined by Jog(Slow/Fast)Velocity Property)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//If the jog is currently active, allow the method to run again to ensure that the corresponding Jog bit can remain high so the jog can continue
//Otherwise, only start a jog when the axis is not already busy
IF fbAxisJog.Busy OR NOT bActive AND NOT bError THEN
	
	fbAxisJog.JogForward:= direction; 
	fbAxisJog.JogBackwards:= NOT direction;
	
	IF fast THEN
		fbAxisJog.Velocity := fJogFastVelocity;
	ELSE
		fbAxisJog.Velocity := fJogSlowVelocity;
	END_IF
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="JogFastVelocity" Id="{1b2a2513-a357-4788-a230-0bce1f136c67}" FolderPath="02_ITF_AxisBase\01_Properties\01_Config\">
      <Declaration><![CDATA[PROPERTY JogFastVelocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{8361121e-bedc-4874-acd3-a6261146f5d2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[JogFastVelocity := fJogFastVelocity;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e489f0ad-8f0e-4429-b255-4423642cdc1a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fJogFastVelocity := JogFastVelocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="JogSlowVelocity" Id="{1b1b4cd8-71a1-4bcc-9839-8466dd905080}" FolderPath="02_ITF_AxisBase\01_Properties\01_Config\">
      <Declaration><![CDATA[PROPERTY JogSlowVelocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{a778afc0-afe5-4e65-b514-1edb0437b76b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[JogSlowVelocity := fJogSlowVelocity;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{320a0644-77d6-4836-8f13-12e9c54aea00}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fJogSlowVelocity := JogSlowVelocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Monitoring" Id="{bb6fc4ed-d443-4e5b-b9ab-eb66e37cd61b}" FolderPath="01_SUPER_Overrides\02_Methods\">
      <Declaration><![CDATA[METHOD Monitoring : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Monitoring();

//Cyclically updates the "Status" values from the NC-axis to the PLC (Axis1.Status...)
SelectedAxis.ReadStatus();

//Cyclically monitor all FB "Busy" bits, as well as the axis "HasJob" bit to ensure ADS communication time does not result in a delay before the "Busy" property is accurate after calling a FB
bActive := 		SimulationAxis.Status.HasJob
				OR	fbAxisJog.Busy
				OR	fbMoveAbsolute.Busy
				OR	fbMoveVelocity.Busy
				OR	fbMoveRelative.Busy
				OR	fbAxisHalt.Busy
				OR	fbAxisStop.Busy
				OR	fbAxisHome.Busy
				OR	fbGearIn.Busy;
				

//Update all internal property variables
bDriveEnabled := fbAxisPower.Status;
bInGear	:= (SelectedAxis.NcToPlc.CoupleState = 3);	//Note that this only looks for a simple gearing arrangement where this axis is a slave and not a master to any other axis
bInPosition := SelectedAxis.Status.InTargetPosition;
fPosition := SelectedAxis.NcToPlc.ActPos;
fPositionSetpoint := SelectedAxis.NcToPlc.SetPos;
bStopped := SelectedAxis.Status.StandStill;
bHomed := SelectedAxis.Status.Homed;
bDriveError := SelectedAxis.Status.DriveDeviceError;
bAxisError := SelectedAxis.Status.Error;
				
//Error monitoring and event logging

IF fbAxisJog.Error AND NOT a_fbAxisBaseAlarms[E_AxisBase.JogError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.JogError], UDINT_TO_STRING(fbAxisJog.ErrorID), '');
										
ELSIF NOT fbAxisJog.Error AND a_fbAxisBaseAlarms[E_AxisBase.JogError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan)  THEN
	a_fbAxisBaseAlarms[E_AxisBase.JogError].Clear(0,0);
END_IF


IF fbAxisPower.Error AND NOT a_fbAxisBaseAlarms[E_AxisBase.PowerError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.PowerError], UDINT_TO_STRING(fbAxisPower.ErrorID), '');
										
ELSIF NOT fbAxisPower.Error AND a_fbAxisBaseAlarms[E_AxisBase.PowerError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan)THEN
	a_fbAxisBaseAlarms[E_AxisBase.PowerError].Clear(0,0);
END_IF


IF fbAxisReset.Error AND NOT a_fbAxisBaseAlarms[E_AxisBase.ResetError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.ResetError], UDINT_TO_STRING(fbAxisReset.ErrorID), '');
										
ELSIF NOT fbAxisReset.Error AND a_fbAxisBaseAlarms[E_AxisBase.ResetError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan) THEN
	a_fbAxisBaseAlarms[E_AxisBase.ResetError].Clear(0,0);
END_IF


IF fbMoveAbsolute.Error AND NOT a_fbAxisBaseAlarms[E_AxisBase.MoveAbsoluteError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.MoveAbsoluteError], UDINT_TO_STRING(fbMoveAbsolute.ErrorID), '');
										
ELSIF NOT fbMoveAbsolute.Error AND a_fbAxisBaseAlarms[E_AxisBase.MoveAbsoluteError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan) THEN
	a_fbAxisBaseAlarms[E_AxisBase.MoveAbsoluteError].Clear(0,0);
END_IF


IF fbMoveVelocity.Error AND NOT a_fbAxisBaseAlarms[E_AxisBase.MoveVelocityError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.MoveVelocityError], UDINT_TO_STRING(fbMoveVelocity.ErrorID), '');
										
ELSIF NOT fbMoveVelocity.Error AND a_fbAxisBaseAlarms[E_AxisBase.MoveVelocityError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan) THEN
	a_fbAxisBaseAlarms[E_AxisBase.MoveVelocityError].Clear(0,0);
END_IF


IF fbMoveRelative.Error AND NOT a_fbAxisBaseAlarms[E_AxisBase.MoveRelativeError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.MoveRelativeError], UDINT_TO_STRING(fbMoveRelative.ErrorID), '');
										
ELSIF NOT fbMoveRelative.Error AND a_fbAxisBaseAlarms[E_AxisBase.MoveRelativeError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan) THEN
	a_fbAxisBaseAlarms[E_AxisBase.MoveRelativeError].Clear(0,0);
END_IF


IF fbAxisHalt.Error AND NOT a_fbAxisBaseAlarms[E_AxisBase.HaltError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.HaltError], UDINT_TO_STRING(fbAxisHalt.ErrorID), '');
										
ELSIF NOT fbAxisHalt.Error AND a_fbAxisBaseAlarms[E_AxisBase.HaltError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan) THEN
	a_fbAxisBaseAlarms[E_AxisBase.HaltError].Clear(0,0);
END_IF

IF fbAxisStop.Error AND NOT a_fbAxisBaseAlarms[E_AxisBase.StopError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.StopError], UDINT_TO_STRING(fbAxisStop.ErrorID), '');
ELSIF NOT fbAxisStop.Error AND a_fbAxisBaseAlarms[E_AxisBase.StopError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan) THEN
	a_fbAxisBaseAlarms[E_AxisBase.StopError].Clear(0,0);
END_IF


IF fbAxisHome.Error AND NOT a_fbAxisBaseAlarms[E_AxisBase.HomeError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.HomeError], UDINT_TO_STRING(fbAxisHome.ErrorID), '');
ELSIF NOT fbAxisHome.Error AND a_fbAxisBaseAlarms[E_AxisBase.HomeError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan) THEN
	a_fbAxisBaseAlarms[E_AxisBase.HomeError].Clear(0,0);
END_IF


IF fbGearIn.Error AND NOT a_fbAxisBaseAlarms[E_AxisBase.GearInError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.GearInError], UDINT_TO_STRING(SimulationAxis.Status.ErrorID), '');
ELSIF NOT fbGearIn.Error AND a_fbAxisBaseAlarms[E_AxisBase.GearInError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan) THEN
	a_fbAxisBaseAlarms[E_AxisBase.GearInError].Clear(0,0);
END_IF


IF fbResetDrv.Error AND NOT a_fbAxisBaseAlarms[E_AxisBase.ResetError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.ResetError], UDINT_TO_STRING(fbResetDrv.AdsErrId), '');
ELSIF NOT fbResetDrv.Error AND a_fbAxisBaseAlarms[E_AxisBase.ResetError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan) THEN
	a_fbAxisBaseAlarms[E_AxisBase.ResetError].Clear(0,0);
END_IF


IF fbAxisPower.Override = 0 AND bActive AND NOT a_fbAxisBaseAlarms[E_AxisBase.CommandWhileInhibited].bRaised THEN
	RaiseAlarm(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.CommandWhileInhibited]);										
ELSIF fbAxisPower.Override <> 0 AND a_fbAxisBaseAlarms[E_AxisBase.CommandWhileInhibited].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan) THEN
	a_fbAxisBaseAlarms[E_AxisBase.CommandWhileInhibited].Clear(0,0);
END_IF


IF bDriveError AND NOT a_fbAxisBaseAlarms[E_AxisBase.DriveError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.DriveError], UDINT_TO_STRING(SimulationAxis.Status.ErrorID), '');
ELSIF NOT bAxisError AND a_fbAxisBaseAlarms[E_AxisBase.DriveError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan) THEN
	a_fbAxisBaseAlarms[E_AxisBase.DriveError].Clear(0,0);
END_IF


IF bAxisError AND NOT a_fbAxisBaseAlarms[E_AxisBase.AxisError].bRaised THEN
	RaiseAlarmWithStrings(	fbAlarm :=  a_fbAxisBaseAlarms[E_AxisBase.DriveError], UDINT_TO_STRING(SimulationAxis.Status.ErrorID), '');
ELSIF NOT bAxisError AND a_fbAxisBaseAlarms[E_AxisBase.AxisError].bRaised AND NOT (bResetHappenedLastScan OR bResetHappenedThisScan) THEN
	a_fbAxisBaseAlarms[E_AxisBase.AxisError].Clear(0,0);
END_IF

bReady := bEnabled AND bDriveEnabled AND NOT bError;

eCurrentAlarmSeverity := F_GetMaxSeverityRaised(	a_fbAlarms := a_fbAxisBaseAlarms,
													eCurrentSeverity := eCurrentAlarmSeverity);]]></ST>
      </Implementation>
    </Method>
    <Method Name="MotionControl" Id="{24aa628f-77c9-4939-b88a-d6572a4e5a53}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD MotionControl : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Enables the Axis for movement when commanded by an "Enable" Method call
fbAxisPower(
	Axis:= SelectedAxis,
	Enable:= bEnabled (*AND (bParamCopyComplete OR NOT bSimulate)*),
	Enable_Positive:= TRUE, 
	Enable_Negative:= TRUE, 
	Override:= fOverride, 
	BufferMode:= MC_BufferMode.MC_Aborting);


//Cyclically calls all motion fbs so that they can properly communicate to the NC
//Trigger bits (usually "Execute") are set false after each block so that external setting of execute will be read and then cleared without requiring external monitoring

//Moves the Axis to a Set Position when commanded by a "MovePosition" Method call
fbMoveAbsolute(
	Axis:= SelectedAxis,
	Velocity:= fTargetVelocity, 
	BufferMode:= MC_BufferMode.MC_Aborting );
	
fbMoveAbsolute.Execute := FALSE;

//Moves the Axis a Set Distance from its current position when commanded by a "MoveRelative" Method call
fbMoveRelative(
	Axis:= SelectedAxis, 
	Velocity:= fTargetVelocity, 
	BufferMode:= MC_BufferMode.MC_Aborting );

fbMoveRelative.Execute := FALSE;

//Starts a continuous move at a set velocity when commanded by a "MoveVelocity" Method call
fbMoveVelocity(
	Axis:= SelectedAxis, 
	Direction:= Tc2_MC2.MC_Direction.MC_Positive_Direction, 
	BufferMode:= MC_BufferMode.MC_Aborting );	

fbMoveVelocity.Execute := FALSE;

IF __ISVALIDREF(MasterAxis) THEN
	//Performs a simple "Gearing" of the axis to a specified master axis at 1:1 ratio
	fbGearIn(
		Master:= MasterAxis, 
		Slave:= SelectedAxis, 
		RatioNumerator:= 1, 
		RatioDenominator:= 1);
		
	fbGearIn.Execute := FALSE;
END_IF

IF bInGear AND NOT bEnabled OR NOT bDriveEnabled THEN
	GearOut();
END_IF

fbGearOut(Slave := SelectedAxis);

fbGearOut.Execute := FALSE;

//Halts the axis without disabling future commands when commanded by the "Stop" Method call
fbAxisHalt(
	Axis:= SelectedAxis,  
	BufferMode:= MC_BufferMode.MC_Aborting );	
	
fbAxisHalt.Execute := FALSE;

//Jogs the axis in a specified direction and velocity when commanded by a "Jog" Method call
fbAxisJog(
	Axis:= SelectedAxis,  
	Mode:= E_JogMode.MC_JOGMODE_CONTINOUS);

fbAxisJog.JogForward := FALSE;		//While the Jog FB does require a constant input in Continuous mode, the Method code will happen between here and the fb being called again, so the FB will not see this blip to false
fbAxisJog.JogBackwards := FALSE;	//When the "Jog" method is no longer being called, this will ensure that the jog stops on the next program cycle

//Resets the NC software axis when commanded by a "Reset" Method call
fbAxisReset(
	Axis:= SelectedAxis);

fbAxisReset.Execute := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MovePosition" Id="{4457c8ba-d59c-46c6-a0cb-8d5fd534908c}" FolderPath="02_ITF_AxisBase\02_Methods\">
      <Declaration><![CDATA[METHOD MovePosition : BOOL
VAR_INPUT
	override 	: BOOL := FALSE;		//Allows this instruction to override another ongoing operation(This parameter is initialized so that once default parameter value functionality is added to TwinCAT, this input will not need to be set explicitly in the Method call)
	position	: LREAL;				//Desired position to which the axis should move
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF override OR NOT bActive AND NOT bError THEN
	
	fbMoveAbsolute.Position := position;
	fbMoveAbsolute.Execute := TRUE;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRelative" Id="{cab08bed-a786-45c8-ab99-9cab715efd30}" FolderPath="02_ITF_AxisBase\02_Methods\">
      <Declaration><![CDATA[METHOD MoveRelative : BOOL
VAR_INPUT
	override 	: BOOL := FALSE;		//Allows this instruction to override another ongoing operation(This parameter is initialized so that once default parameter value functionality is added to TwinCAT, this input will not need to be set explicitly in the Method call)
	distance 	: LREAL;				//Desired distance to be moved
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF override OR NOT bActive AND NOT bError THEN
	
	fbMoveRelative.Distance := distance;
	fbMoveRelative.Execute := TRUE;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveVelocity" Id="{fe47d529-d067-4610-afa7-028a0d8a9831}" FolderPath="02_ITF_AxisBase\02_Methods\">
      <Declaration><![CDATA[METHOD MoveVelocity : BOOL
VAR_INPUT
	override	: BOOL := FALSE;				//Allows this instruction to override another ongoing operation(This parameter is initialized so that once default parameter value functionality is added to TwinCAT, this input will not need to be set explicitly in the Method call)
	velocity	: LREAL := fTargetVelocity;		//Desired velocity for the axis (This parameter is initialized so that once default parameter value functionality is added to TwinCAT, this input will not need to be set explicitly in the Method call)
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF override OR NOT bActive AND NOT bError THEN
	
	fbMoveVelocity.Velocity := velocity;
	fbMoveVelocity.Execute := TRUE;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Position" Id="{735f7abc-47fb-4467-aae1-b71e86502f6b}" FolderPath="02_ITF_AxisBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY Position : LREAL]]></Declaration>
      <Get Name="Get" Id="{b21971e3-905e-489e-9dc2-aa78d1607290}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Position := fPosition;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="PositionSetpoint" Id="{8c1216c8-9c06-4235-8e21-3803970a257b}" FolderPath="02_ITF_AxisBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY PositionSetpoint : LREAL]]></Declaration>
      <Get Name="Get" Id="{a7e12c4c-7147-45b1-b3bb-f343af67c769}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PositionSetpoint := fPositionSetpoint;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{ae51c42e-6392-4a55-937d-c84bef4908ad}" FolderPath="01_SUPER_Overrides\02_Methods\">
      <Declaration><![CDATA[METHOD Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInGear THEN
	GearOut();
END_IF

IF bDriveError THEN
	ResetDrive();
END_IF

IF bAxisError THEN
	ResetAxis();
END_IF

SUPER^.Reset();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetAxis" Id="{95a39a1c-bc5b-4d69-8235-1de8671c4f3c}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD ResetAxis : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbAxisReset.Execute := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetDrive" Id="{61a188ee-6e1c-4070-8317-83a705f013d8}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD ResetDrive : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbResetDrv.Execute := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetOverridePercent" Id="{c7ab7402-2df9-45e2-80c8-5ecf074eb275}" FolderPath="02_ITF_AxisBase\02_Methods\">
      <Declaration><![CDATA[METHOD SetOverridePercent : BOOL
VAR_INPUT
	fOverrideInput : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fOverride := fOverrideInput;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SimulateOperation" Id="{d1ff29c4-9c3d-4f08-b25b-d926ccfd1f38}" FolderPath="01_SUPER_Overrides\02_Methods\">
      <Declaration><![CDATA[METHOD SimulateOperation : BOOL
VAR_INPUT
END_VAR
VAR_INST
	fbWriteParam: ARRAY[1..8] OF MC_WriteParameter;
	fbAxisParamRead : ARRAY[1..8] OF MC_ReadParameter;
	fTestValue: LREAL;
	fbSetSimulationPosition: MC_SetPosition;
END_VAR
VAR
	i: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// the need is to insure that the simulation axis always has the same dynamics and speed setpoints as the hardware axis
//copy sequence using MC2 Function Blocks
(*
CASE nAxisCopy OF
	0:	// hold state waiting to start
		FOR i := 1 TO 8 DO
			fbAxisParamRead[i](
				Axis:= HardwareAxis,
				Enable := FALSE);
			fbWriteParam[i](
				Axis:=SimulationAxis , 
				Execute:= FALSE);
		END_FOR
		
		nAxisCopy := 10;
	10:	//read axis param
		bParamCopyComplete := FALSE;
		fbAxisParamRead[1](
			Axis:= HardwareAxis, 
			Enable:=TRUE , 
			ParameterNumber:= MC_AxisParameter.AxisMaxVelocity, 
			ReadMode:= 1, 
				Value=> fTestValue );
		fbAxisParamRead[2](
			Axis:= HardwareAxis, 
			Enable:=TRUE , 
			ParameterNumber:= MC_AxisParameter.AxisAcc, 
			ReadMode:= 1 );
		fbAxisParamRead[3](
			Axis:= HardwareAxis, 
			Enable:=TRUE , 
			ParameterNumber:= MC_AxisParameter.AxisDec, 
			ReadMode:= 1 );
		fbAxisParamRead[4](
			Axis:= HardwareAxis, 
			Enable:=TRUE , 
			ParameterNumber:= MC_AxisParameter.AxisJerk, 
			ReadMode:= 1 );
		fbAxisParamRead[5](
			Axis:= HardwareAxis, 
			Enable:=TRUE , 
			ParameterNumber:= MC_AxisParameter.AxisMaxVelocity, 
			ReadMode:= 1 );
		fbAxisParamRead[6](
			Axis:= HardwareAxis, 
			Enable:=TRUE , 
			ParameterNumber:= MC_AxisParameter.AxisManualVelocityFast, 
			ReadMode:= 1 );
		fbAxisParamRead[7](
			Axis:= HardwareAxis, 
			Enable:=TRUE , 
			ParameterNumber:= MC_AxisParameter.AxisManualVelocitySlow, 
			ReadMode:= 1 );
		fbAxisParamRead[8](
			Axis:= HardwareAxis, 
			Enable:=TRUE , 
			ParameterNumber:= MC_AxisParameter.AxisEncoderModuloValue, 
			ReadMode:= 1 );			
		IF NOT (fbAxisParamRead[1].Busy AND fbAxisParamRead[1].Valid) AND NOT 
				(fbAxisParamRead[2].Busy AND fbAxisParamRead[2].Valid) AND NOT 
				(fbAxisParamRead[3].Busy AND fbAxisParamRead[3].Valid) AND NOT 
				(fbAxisParamRead[4].Busy AND fbAxisParamRead[4].Valid) AND NOT 
				(fbAxisParamRead[5].Busy AND fbAxisParamRead[5].Valid) AND NOT 
				(fbAxisParamRead[6].Busy AND fbAxisParamRead[6].Valid) AND NOT 
				(fbAxisParamRead[7].Busy AND fbAxisParamRead[7].Valid) AND NOT 
				(fbAxisParamRead[8].Busy AND fbAxisParamRead[8].Valid)	THEN
			nAxisCopy := 20;
		ELSIF fbAxisParamRead[1].Error OR fbAxisParamRead[2].Error OR fbAxisParamRead[3].Error OR fbAxisParamRead[4].Error OR fbAxisParamRead[5].Error OR fbAxisParamRead[6].Error OR fbAxisParamRead[7].Error OR fbAxisParamRead[8].Error THEN
			nAxisCopy := 40;
		END_IF
	20:	//write axis param
		fbWriteParam[1](
			Axis:=SimulationAxis , 
			Execute:= TRUE, 
			ParameterNumber:= MC_AxisParameter.AxisVeloMax, 
			Value:= fTestValue );
		fbWriteParam[2](
			Axis:=SimulationAxis , 
			Execute:= TRUE, 
			ParameterNumber:=  MC_AxisParameter.AxisAcc, 
			Value:=fbAxisParamRead[2].Value );
		fbWriteParam[3](
			Axis:=SimulationAxis , 
			Execute:= TRUE, 
			ParameterNumber:=  MC_AxisParameter.AxisDec, 
			Value:=fbAxisParamRead[3].Value );
		fbWriteParam[4](
			Axis:=SimulationAxis , 
			Execute:= TRUE, 
			ParameterNumber:= MC_AxisParameter.AxisJerk, 
			Value:=fbAxisParamRead[4].Value );
		fbWriteParam[5](
			Axis:=SimulationAxis , 
			Execute:= TRUE, 
			ParameterNumber:= MC_AxisParameter.AxisMaxVelocity, 
			Value:=fbAxisParamRead[5].Value );
		fbWriteParam[6](
			Axis:=SimulationAxis , 
			Execute:= TRUE, 
			ParameterNumber:= MC_AxisParameter.AxisManualVelocityFast, 
			Value:=fbAxisParamRead[6].Value );
		fbWriteParam[7](
			Axis:=SimulationAxis , 
			Execute:= TRUE, 
			ParameterNumber:= MC_AxisParameter.AxisManualVelocitySlow, 
			Value:=fbAxisParamRead[7].Value );
		fbWriteParam[8](
			Axis:=SimulationAxis , 
			Execute:= TRUE, 
			ParameterNumber:= MC_AxisParameter.AxisEncoderModuloValue, 
			Value:=fbAxisParamRead[8].Value );		
		IF 	fbWriteParam[1].Done AND fbWriteParam[2].Done AND fbWriteParam[3].Done AND fbWriteParam[4].Done AND fbWriteParam[5].Done AND fbWriteParam[6].Done AND fbWriteParam[7].Done AND fbWriteParam[8].Done THEN 
			bParamCopyComplete := TRUE;
			nAxisCopy := 25;
		ELSIF fbWriteParam[1].Error OR fbWriteParam[2].Error OR fbWriteParam[3].Error OR fbWriteParam[4].Error OR fbWriteParam[5].Error OR fbWriteParam[6].Error OR fbWriteParam[7].Error OR fbWriteParam[8].Error THEN
			nAxisCopy := 40;		
		END_IF
	25: // write the hardware axis position to the simulation axis		
		fbSetSimulationPosition(
								Axis:=SimulationAxis , 
								Execute:= TRUE, 
								Position:= HardwareAxis.NcToPlc.ActPos);
		IF fbSetSimulationPosition.Done THEN 
			nAxisCopy:= 30;
		ELSIF 	fbSetSimulationPosition.Error THEN
			nAxisCopy := 40;
		END_IF
	
	30: //set selected axis
		SelectedAxis REF= SimulationAxis;
		MotionControl();
	40: //reset FB's execute and retry
		nAxisCopy :=0;
END_CASE
*)
SelectedAxis REF= HardwareAxis;
//MotionControl();]]></ST>
      </Implementation>
    </Method>
    <Method Name="StandardOperation" Id="{41f73aab-0313-4f40-bdbc-bd3027fb897e}" FolderPath="01_SUPER_Overrides\02_Methods\">
      <Declaration><![CDATA[METHOD StandardOperation : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SelectedAxis REF= HardwareAxis;
nAxisCopy :=0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop" Id="{34368b61-2529-4fbb-9bd5-94608a09587b}" FolderPath="02_ITF_AxisBase\02_Methods\">
      <Declaration><![CDATA[METHOD Stop : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbAxisHalt.Execute := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Stopped" Id="{21caf8cf-35e1-4382-ba58-1064575b4bea}" FolderPath="02_ITF_AxisBase\01_Properties\03_Status\">
      <Declaration><![CDATA[PROPERTY Stopped : BOOL]]></Declaration>
      <Get Name="Get" Id="{9d0759f2-a208-47e4-a3e0-4201ee14c7f8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Stopped := bStopped;//Axis1.Status.StandStill;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="TargetVelocity" Id="{74cf7284-2549-4bf5-b6ee-5e705534f1be}" FolderPath="02_ITF_AxisBase\01_Properties\01_Config\">
      <Declaration><![CDATA[PROPERTY TargetVelocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{8b10f2d5-2236-4ab3-9318-4840e60faf8c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TargetVelocity := fTargetVelocity;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{78fcc4c5-e7f9-4e26-ba73-aac4631ae881}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fTargetVelocity := TargetVelocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Uninhibit" Id="{6cf8d6ec-12ea-48ff-be63-85f9ff6e397c}" FolderPath="02_ITF_AxisBase\02_Methods\">
      <Declaration><![CDATA[METHOD Uninhibit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fOverride := 100;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_AxisBase">
      <LineId Id="55" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.AllowHMIControl">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.AxisError.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.AxisRef.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.BlockHMIControl">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.CreateEvents">
      <LineId Id="7" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.DriveEnabled.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.DriveError.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.ErrorOperation">
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.GearInBasic">
      <LineId Id="24" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.GearOut">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
    </LineIds>
    <LineIds Name="FB_AxisBase.HardwareUpdate">
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="5" />
      <LineId Id="16" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.HMICommunication">
      <LineId Id="43" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="51" Count="2" />
      <LineId Id="112" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="63" Count="2" />
      <LineId Id="110" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="69" Count="3" />
      <LineId Id="86" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="102" Count="2" />
    </LineIds>
    <LineIds Name="FB_AxisBase.Home">
      <LineId Id="25" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.Homed.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.InGear.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.Inhibit">
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.initialize">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="5" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.InPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.Jog">
      <LineId Id="27" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="23" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.JogFastVelocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.JogFastVelocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.JogSlowVelocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.JogSlowVelocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.Monitoring">
      <LineId Id="8" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="9" />
      <LineId Id="9" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="165" Count="3" />
      <LineId Id="170" Count="1" />
      <LineId Id="173" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="249" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="29" Count="5" />
      <LineId Id="245" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="38" Count="5" />
      <LineId Id="241" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="47" Count="5" />
      <LineId Id="237" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="56" Count="5" />
      <LineId Id="233" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="65" Count="5" />
      <LineId Id="225" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="74" Count="5" />
      <LineId Id="219" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="83" Count="2" />
      <LineId Id="87" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="92" Count="5" />
      <LineId Id="211" Count="0" />
      <LineId Id="101" Count="5" />
      <LineId Id="206" Count="0" />
      <LineId Id="110" Count="5" />
      <LineId Id="261" Count="0" />
      <LineId Id="119" Count="2" />
      <LineId Id="259" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="125" Count="2" />
      <LineId Id="260" Count="0" />
      <LineId Id="128" Count="1" />
      <LineId Id="199" Count="0" />
      <LineId Id="255" Count="1" />
      <LineId Id="254" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="269" Count="1" />
      <LineId Id="268" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.MotionControl">
      <LineId Id="7" Count="17" />
      <LineId Id="89" Count="0" />
      <LineId Id="26" Count="16" />
      <LineId Id="85" Count="0" />
      <LineId Id="43" Count="8" />
      <LineId Id="62" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="63" Count="12" />
      <LineId Id="5" Count="0" />
      <LineId Id="77" Count="4" />
      <LineId Id="76" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.MovePosition">
      <LineId Id="58" Count="4" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.MoveRelative">
      <LineId Id="35" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.MoveVelocity">
      <LineId Id="29" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.Position.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.PositionSetpoint.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.Reset">
      <LineId Id="21" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="6" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.ResetAxis">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.ResetDrive">
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.SetOverridePercent">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.SimulateOperation">
      <LineId Id="13" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="209" Count="1" />
      <LineId Id="212" Count="1" />
      <LineId Id="211" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="60" Count="4" />
      <LineId Id="173" Count="0" />
      <LineId Id="71" Count="3" />
      <LineId Id="70" Count="0" />
      <LineId Id="77" Count="3" />
      <LineId Id="76" Count="0" />
      <LineId Id="82" Count="3" />
      <LineId Id="81" Count="0" />
      <LineId Id="87" Count="3" />
      <LineId Id="86" Count="0" />
      <LineId Id="92" Count="3" />
      <LineId Id="91" Count="0" />
      <LineId Id="97" Count="3" />
      <LineId Id="96" Count="0" />
      <LineId Id="230" Count="3" />
      <LineId Id="229" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="179" Count="5" />
      <LineId Id="234" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="201" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="198" Count="2" />
      <LineId Id="103" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="195" Count="2" />
      <LineId Id="108" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="192" Count="2" />
      <LineId Id="113" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="189" Count="2" />
      <LineId Id="118" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="186" Count="2" />
      <LineId Id="123" Count="0" />
      <LineId Id="127" Count="3" />
      <LineId Id="126" Count="0" />
      <LineId Id="235" Count="3" />
      <LineId Id="131" Count="1" />
      <LineId Id="178" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="135" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="242" Count="3" />
      <LineId Id="252" Count="1" />
      <LineId Id="255" Count="1" />
      <LineId Id="254" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.StandardOperation">
      <LineId Id="69" Count="0" />
      <LineId Id="73" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.Stop">
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.Stopped.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.TargetVelocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.TargetVelocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisBase.Uninhibit">
      <LineId Id="17" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>