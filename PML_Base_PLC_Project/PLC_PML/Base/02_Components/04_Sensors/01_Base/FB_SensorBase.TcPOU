<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_SensorBase" Id="{166fe0c3-f72e-4879-a970-7a3f8e331702}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ABSTRACT FB_SensorBase EXTENDS FB_ComponentBase IMPLEMENTS ITF_SensorBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//ITF_BasicSensor internal property variables
	eDebounceMode		: E_DebounceMode;	//Defines the debounce model that will filter the sensor's output to the program
	tDebounceTime		: TIME;				//Time input parameter for use in Debounce functionality
	bInverted			: BOOL;				//Defines the output polarity of the sensor - a "TRUE" value will result in the signal of the sensor being inverted
	nSimulationInput	: DINT;				//Provides configuration input to the simulation functionality
	eSimulationMode		: E_SensorSimulationMode;	//Defines the mode of operation for the simulation functionality of this component
	tTimeActive			: TIME;				//Tracks the amount of time that the sensor has been in an active state
	tTimeInactive		: TIME;				//Tracks the amount of time that the sensor has been in an inactive state
	
	//Internal variables
	//bInitialized 			: BOOL;
	fbActiveTimer_TON		: Tc2_Standard.TON;		//Tracks the amount of time that the sensor has been in an active state
	fbInactiveTimer_TON		: Tc2_Standard.TON;		//Tracks the amount of time that the sensor has been in an inactive state
	fbDebounceTimer_TON		: Tc2_Standard.TON;		//Utilized in the debounce implementation
	fbDebounceTimer_TP		: Tc2_Standard.TP;		//Utilized in the debounce implementation
	bRawSensorInput			: BOOL;					//Raw input from sensor
	bProcessedSensorInput	: BOOL;					//Sensor input after Debounce and (if necessary) Inversion
	
	stSensorBaseHMI			: ST_SensorBase_HMI;
	
	//Simulation variables
	bSimulationInput		: DINT;					//Input variable to manipulate simulation behavior
	fbSimulationPulse1_TP	: Tc2_Standard.TP;		//Pulse Timer for simulated sensor pulse generation
	fbSimulationPulse2_TP	: Tc2_Standard.TP;		//Pulse Timer for simulated sensor pulse generation
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CyclicLogic();]]></ST>
    </Implementation>
    <Folder Name="01_SUPER_Overrides" Id="{90ca50ed-165d-4e07-ae87-15ca3c1646b4}" />
    <Folder Name="02_ITF_SensorBase" Id="{2d7334f7-157b-40a9-a4a7-f76165606b61}">
      <Folder Name="01_Config" Id="{1d9e2feb-0142-4dad-9707-638e8ebd5a79}" />
      <Folder Name="02_Control" Id="{99bb89b4-7ef7-4e6c-a15a-ddc979964362}" />
      <Folder Name="03_Status" Id="{55afb2a4-e155-44af-929d-dc4f3bf3f63d}" />
    </Folder>
    <Method Name="AllowHMIControl" Id="{51b89c85-e042-4086-9824-b639fc70c9c1}" FolderPath="01_SUPER_Overrides\">
      <Declaration><![CDATA[METHOD AllowHMIControl : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.AllowHMIControl();

stSensorBaseHMI.bHMIControlAvailable := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="BlockHMIControl" Id="{2c9cb8be-d719-4f27-b1f2-2b99f495ee6b}" FolderPath="01_SUPER_Overrides\">
      <Declaration><![CDATA[METHOD BlockHMIControl : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.BlockHMIControl();

stSensorBaseHMI.bHMIControlAvailable := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="DebounceMode" Id="{688142c7-1a92-4905-8c78-b67bd59b9a63}" FolderPath="02_ITF_SensorBase\01_Config\">
      <Declaration><![CDATA[PROPERTY DebounceMode : E_DebounceMode
]]></Declaration>
      <Get Name="Get" Id="{2693c5cb-de0e-42ba-82f9-5ae6b996b64e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DebounceMode := eDebounceMode;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a686be92-bb7d-4730-83f3-2edb72935b6b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eDebounceMode := DebounceMode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="DebounceTime" Id="{bab7ebe1-a7e9-4e75-9f98-9741b701aeb8}" FolderPath="02_ITF_SensorBase\01_Config\">
      <Declaration><![CDATA[PROPERTY DebounceTime : TIME]]></Declaration>
      <Get Name="Get" Id="{aa771017-cce4-409d-8e52-9533f49f117d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DebounceTime := tDebounceTime;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{4f7461c3-73b1-4085-81a0-9056689ff72e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[tDebounceTime := DebounceTime;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="HMICommunication" Id="{915c1eb0-81ee-4b43-87d3-59ec907a70bb}" FolderPath="01_SUPER_Overrides\">
      <Declaration><![CDATA[METHOD HMICommunication : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.HMICommunication();

//Extend this method in extended FBs to communicate specific implementation data

//Process HMI requests
IF stSensorBaseHMI.bIncomingHMIRequest AND NOT stSensorBaseHMI.bHMICommandConfirmation THEN		//If a request has been issued by the HMI, and a previous request has not just finished being processed
	IF stSensorBaseHMI.bHMIControlAvailable THEN		//If the current conditions permit HMI control
		IF stSensorBaseHMI.bSetDebounceModeHMIRequest THEN
			eDebounceMode := stSensorBaseHMI.eSetDebounceModeHMIValue;
			stSensorBaseHMI.bHMICommandConfirmation := TRUE;	//Reset the incoming request bit after the request has been processed
		END_IF
		IF stSensorBaseHMI.bSetDebounceTimeHMIRequest THEN
			tDebounceTime := stSensorBaseHMI.tSetDebounceTimeHMIValue;
			stSensorBaseHMI.bHMICommandConfirmation := TRUE;	//Reset the incoming request bit after the request has been processed
		END_IF
		IF stSensorBaseHMI.bSetSimulationModeHMIRequest THEN
			eSimulationMode := stSensorBaseHMI.eSetSimulationModeHMIValue;
			stSensorBaseHMI.bHMICommandConfirmation := TRUE;	//Reset the incoming request bit after the request has been processed
		END_IF
		IF stSensorBaseHMI.bSetSimulationInputHMIRequest THEN
			nSimulationInput := stSensorBaseHMI.nSetSimulationInputHMIValue;
			stSensorBaseHMI.bHMICommandConfirmation := TRUE;	//Reset the incoming request bit after the request has been processed
		END_IF
		IF stSensorBaseHMI.bInvertedHMIRequest THEN
			bInverted := TRUE;
			stSensorBaseHMI.bHMICommandConfirmation := TRUE;	//Reset the incoming request bit after the request has been processed
		END_IF
		IF stSensorBaseHMI.bUninvertedHMIRequest THEN
			bInverted := FALSE;
			stSensorBaseHMI.bHMICommandConfirmation := TRUE;	//Reset the incoming request bit after the request has been processed
		END_IF
		IF stSensorBaseHMI.bSimulateOperationHMIRequest THEN
			bSimulate := TRUE;
			stSensorBaseHMI.bHMICommandConfirmation := TRUE;	//Reset the incoming request bit after the request has been processed
		END_IF
		IF stSensorBaseHMI.bStandardOperationHMIRequest THEN
			bSimulate := FALSE;
			stSensorBaseHMI.bHMICommandConfirmation := TRUE;	//Reset the incoming request bit after the request has been processed
		END_IF
	END_IF
END_IF

//Update HMI status info
stSensorBaseHMI.eDebounceMode := eDebounceMode;
stSensorBaseHMI.tDebounceTime := tDebounceTime;
stSensorBaseHMI.bInverted := bInverted;
stSensorBaseHMI.eSimulationMode := eSimulationMode;
stSensorBaseHMI.nSimulationInput := nSimulationInput;
stSensorBaseHMI.tTimeActive := tTimeActive;
stSensorBaseHMI.tTimeInactive := tTimeInactive;]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitialConfig" Id="{7cbdbe8c-b0d3-4c3f-b6c0-35da6aae9ee3}">
      <Declaration><![CDATA[METHOD InitialConfig : BOOL
VAR_INPUT	
	eDBMode				: E_DebounceMode;			//Debounce Mode
	tDBTime				: TIME;						//Debounce Time
	bEnable			: BOOL;						//Enable or Disable the sensor's operation
	bInvert			: BOOL;						//TRUE = Invert return signal
	bSim			: BOOL;						//TRUE = Ignore Hardware and simulate sensor operation
	nSimInput 	: DINT;						//Input parameter for simulation adjustment
	eSimMode		: E_SensorSimulationMode;	//Configure Simulation behavior of the sensor
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DebounceMode := eDBMode;
DebounceTime := tDBTime;
Enabled := bEnable;
Inverted := bInvert;
Simulate := bSim;
SimulationInput := nSimInput;
SimulationMode := eSimMode;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Inverted" Id="{39e48fd0-66e1-425c-acf6-ad7b2b499da2}" FolderPath="02_ITF_SensorBase\01_Config\">
      <Declaration><![CDATA[PROPERTY Inverted : BOOL
]]></Declaration>
      <Get Name="Get" Id="{c6b4f47e-957b-45b9-9ef8-a007ed3eaa6d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Inverted := bInverted;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{cf77937e-0bdc-48a6-b782-213aa88cac23}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bInverted := Inverted;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Monitoring" Id="{bb3d8738-54be-4c16-ad2a-a6e2a3475e43}" FolderPath="01_SUPER_Overrides\">
      <Declaration><![CDATA[METHOD Monitoring : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Monitoring();

//If flicker counters or other diagnostic systems are desired, their implementation could be here
//Any warnings, errors, or other desired messages would also be generated here

//T#71582M47S295MS is the upper bound of the TIME type, meaning these timers will continue to increase ET for as long as possible
fbActiveTimer_TON(IN := bActive, PT := T#71582M47S295MS, ET => tTimeActive);
fbInactiveTimer_TON(IN := NOT bActive, PT := T#71582M47S295MS, ET => tTimeInactive);

bReady := bEnabled AND NOT bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ProcessInput" Id="{783c8a65-1177-48f0-8d25-4521a297ef5e}">
      <Declaration><![CDATA[METHOD ProcessInput : BOOL
VAR_INPUT
	bInput	: BOOL;
END_VAR
VAR
	bDebouncedInput	: BOOL;
END_VAR
VAR_INST
	bLastDebouncedInput : BOOL;
	nMovingAverage		: DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eDebounceMode OF
	E_DebounceMode.RawInput:					//Passes raw input through
		bDebouncedInput := bInput;		
		
	E_DebounceMode.SimpleFlickerFilter:			//Requires the raw input to be a consistent value for a set time period before output changes
		fbDebounceTimer_TON(IN := (bInput <> bDebouncedInput), PT := tDebounceTime);	//runs the timer whenever a differing input is detected
		IF fbDebounceTimer_TON.Q THEN
			bDebouncedInput := bInput;	//once the raw input has been different for the specified debounce time, the processed input is updated
		END_IF
	E_DebounceMode.EdgeDetectFilter:			//Updates the processed value immediately on a change from steady state, but mutes any sensor flickers for the specified time immediately following the change
		IF (bInput <> bDebouncedInput) AND (NOT fbDebounceTimer_TP.Q) THEN			//A differing raw input must be detected outside of the mute window created by the pulse timer
			bDebouncedInput := bInput;
		END_IF
		fbDebounceTimer_TP(IN := (bDebouncedInput <> bLastDebouncedInput), PT := tDebounceTime);	//"Q" will be TRUE for tDebounce time after the bProcessedSensorInput value is changed
	E_DebounceMode.MovingAverage:		//Uses a "moving average"-like calculation to compensate for extremely inconsistent signals - prevents poorly timed flickers from causing disproportionate results
		fbDebounceTimer_TON(IN := NOT fbDebounceTimer_TON.Q, PT := T#5MS);	//Provides a 1ms "polling" trigger
		IF fbDebounceTimer_TON.Q THEN		//TRUE once every millisecond
			IF bInput THEN			//If raw input is currently active at the time of polling
				IF nMovingAverage < TIME_TO_DINT(tDebounceTime) THEN	//If the moving average has not reached its "weight limit" as set by debounce time
					nMovingAverage := nMovingAverage + 5;		//Add 1 to the average
				END_IF
			ELSE	//If raw input is currently inactive at the time of polling
				IF nMovingAverage > - TIME_TO_DINT(tDebounceTime) THEN	//If the moving average has not reached its "weight limit" as set by debounce time
					nMovingAverage := nMovingAverage - 5;		//Subtract 1 from the average
				END_IF
			END_IF
		END_IF
		
		IF nMovingAverage >= 0 THEN
			bDebouncedInput := TRUE;
		ELSE
			bDebouncedInput := FALSE;
		
		END_IF
END_CASE

bLastDebouncedInput := bDebouncedInput;		//Update "Last value"

IF bInverted THEN		//If signal inversion is requested, invert the signal
	bProcessedSensorInput := NOT bDebouncedInput;
ELSE 
	bProcessedSensorInput := bDebouncedInput;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SimulateOperation" Id="{2d7da1d7-aab6-40c2-98f2-f152c174b9ec}" FolderPath="01_SUPER_Overrides\">
      <Declaration><![CDATA[METHOD SimulateOperation : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eSimulationMode OF
	E_SensorSimulationMode.InputDriven:
		ProcessInput(bInput := DINT_TO_BOOL(bSimulationInput));
	E_SensorSimulationMode.Periodic:
		fbSimulationPulse1_TP(IN := NOT fbSimulationPulse2_TP.Q, PT := DINT_TO_TIME(nSimulationInput));
		fbSimulationPulse2_TP(IN := NOT fbSimulationPulse1_TP.Q, PT := DINT_TO_TIME(nSimulationInput));
		ProcessInput(bInput := fbSimulationPulse2_TP.Q);
END_CASE

bActive := bProcessedSensorInput;]]></ST>
      </Implementation>
    </Method>
    <Property Name="SimulationInput" Id="{2276750a-76ab-4dbb-9dcb-0efd65260aa6}" FolderPath="02_ITF_SensorBase\02_Control\">
      <Declaration><![CDATA[PROPERTY SimulationInput : DINT]]></Declaration>
      <Get Name="Get" Id="{70d2b754-0c77-4952-a7cb-10764ea69672}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SimulationInput := nSimulationInput;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{af8d947c-042d-4641-9735-ab44b0085613}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nSimulationInput := SimulationInput;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="SimulationMode" Id="{4bf6863f-96f7-47e5-aeb1-555dd119fe77}" FolderPath="02_ITF_SensorBase\01_Config\">
      <Declaration><![CDATA[PROPERTY SimulationMode : E_SensorSimulationMode]]></Declaration>
      <Get Name="Get" Id="{00e5db5c-487f-43b9-b506-e8e95294e691}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SimulationMode := eSimulationMode;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{475697c3-b87c-4b9c-89d3-96501a5bb4af}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eSimulationMode := SimulationMode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="StandardOperation" Id="{5154e3b5-77aa-4380-812a-e91e5202db1b}" FolderPath="01_SUPER_Overrides\">
      <Declaration><![CDATA[METHOD StandardOperation : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ProcessInput(bInput := bRawSensorInput);
bActive := bProcessedSensorInput;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TimeActive" Id="{1e6786b9-2484-4afe-bbf6-637688fbf49f}" FolderPath="02_ITF_SensorBase\03_Status\">
      <Declaration><![CDATA[PROPERTY TimeActive : TIME]]></Declaration>
      <Get Name="Get" Id="{da367d2d-08f5-4e5c-b738-dd6bd022f73a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TimeActive := tTimeActive;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="TimeInactive" Id="{35799dfe-b615-4ef6-bb1b-07a4ef0387c6}" FolderPath="02_ITF_SensorBase\03_Status\">
      <Declaration><![CDATA[PROPERTY TimeInactive : TIME]]></Declaration>
      <Get Name="Get" Id="{7703b8cb-0f49-47d1-8b9a-3c25511ed4ca}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TimeInactive := tTimeInactive;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_SensorBase">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.AllowHMIControl">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.BlockHMIControl">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.DebounceMode.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.DebounceMode.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.DebounceTime.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.DebounceTime.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.HMICommunication">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="4" />
      <LineId Id="78" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="34" Count="8" />
      <LineId Id="6" Count="0" />
      <LineId Id="74" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.InitialConfig">
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="4" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.Inverted.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.Inverted.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.Monitoring">
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.ProcessInput">
      <LineId Id="39" Count="9" />
      <LineId Id="57" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="71" Count="2" />
      <LineId Id="75" Count="1" />
      <LineId Id="74" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="77" Count="2" />
      <LineId Id="81" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="51" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.SimulateOperation">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.SimulationInput.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.SimulationInput.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.SimulationMode.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.SimulationMode.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.StandardOperation">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.TimeActive.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SensorBase.TimeInactive.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>